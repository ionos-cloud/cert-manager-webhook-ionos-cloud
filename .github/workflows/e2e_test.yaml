name: e2e tests
on:
  pull_request:

jobs:
    e2e-test:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          cert_manager_version: ["v1.15.0", "v1.16.0", "v1.17.0"]
      steps:
        - name: Create k8s Kind Cluster
          uses: helm/kind-action@v1
        - uses: azure/setup-helm@v4.3.0
          name: install helm
        - uses: actions/checkout@v4
          name: checkout
        - name: run e2e tests
          env:
            TEST_ZONE_NAME: ${{ secrets.TEST_ZONE_NAME }}
            IONOS_TOKEN: ${{ secrets.IONOS_TOKEN }}
          run : |
           ./run-e2e-tests.sh --cert-manager-version ${{ matrix.cert_manager_version }}
        #- name: install cert-manager chart
        #  run: |
        #    helm repo add jetstack https://charts.jetstack.io --force-update
        #    helm install \
        #    cert-manager jetstack/cert-manager \
        #    --namespace cert-manager \
        #    --create-namespace \
        #    --set crds.enabled=true \
        #     --set 'extraArgs={--dns01-recursive-nameservers-only,--dns01-recursive-nameservers=8.8.8.8:53\,1.1.1.1:53}' \
        #    --version ${{ matrix.cert_manager_version }}
        #- name: Setup go
        #  uses: actions/setup-go@v5
        #  with:
        #    go-version: stable
        #- name: build binary
        #  run: |
        #    CGO_ENABLED=0 go build -ldflags "-s -w" -o ./cert-manager-webhook-ionos-cloud -v cmd/webhook/main.go
        #  # we have to make sure we use the latest code in the chart
        #- name: build docker image
        #  run: |
        #    docker buildx build --platform linux/amd64 -t cert-manager-e2e-tests:${{ github.run_number }} .
        #- name: load image into kind
        #  run: |
        #    kind load docker-image cert-manager-e2e-tests:${{ github.run_number }} -n chart-testing
        #- name: install cert-manager-webhook-ionos-cloud chart
        #  run: |
        #    helm install cert-manager-webhook-ionos-cloud chart/cert-manager-webhook-ionos-cloud \
        #    --set image.repository=cert-manager-e2e-tests \
        #    --set image.tag=${{ github.run_number }}
        #    kubectl wait --timeout=30s --for=jsonpath='{.status.readyReplicas}'=1 deployment/cert-manager-webhook-ionos-cloud
        #- name: create ionos token secret
        #  env:
        #      IONOS_TOKEN: ${{ secrets.IONOS_TOKEN }}
        #  run: |
        #    kubectl create secret generic cert-manager-webhook-ionos-cloud --from-literal=auth-token="$(echo $IONOS_TOKEN)"
        #- name: create issuer
        #  run: |
        #    kubectl apply -f .github/test-manifests/issuer.yaml
        #    kubectl wait --timeout=10s --for=condition=Ready=True issuer/letsencrypt-ionos-e2e
        #- name: generate random zone prefix and create a sub-zone
        #  id: zone-create
        #  env:
        #    TEST_ZONE_NAME: ${{ secrets.TEST_ZONE_NAME }}
        #    IONOS_TOKEN: ${{ secrets.IONOS_TOKEN }}
        #  run: |
        #    PREFIX=$(date +%k%M%N)
        #    ZONE_ID=$(curl -v -H "Authorization: Bearer $IONOS_TOKEN" --json \
        #    "{\"properties\":{\"zoneName\":\"$PREFIX.$TEST_ZONE_NAME\",\"description\":\"used for e2e testing for cert-manager webhook\",\"enabled\":true}}" \
        #    https://dns.de-fra.ionos.com/zones | jq -r .id)
        #    echo "prefix=$PREFIX" >> "$GITHUB_OUTPUT"
        #    echo "zone_id=$ZONE_ID" >> "$GITHUB_OUTPUT"
        #- name: create certificate and check issuance
        #  env:
        #      TEST_ZONE_NAME: ${{ secrets.TEST_ZONE_NAME }}
        #      PREFIX: ${{ steps.zone-create.outputs.prefix }}
        #  run: |
        #    cat .github/test-manifests/certificate.tmpl.yaml | envsubst | kubectl apply -f -
        #    kubectl wait --timeout=2m --for=condition=Ready=True certificate/certificate-ionos-with-dns-01-test
        #- name: delete the sub-zone
        #  env:
        #      ZONE_ID: ${{ steps.zone-create.outputs.zone_id }}
        #      IONOS_TOKEN: ${{ secrets.IONOS_TOKEN }}
        #  run: |
        #    curl -XDELETE -v -H "Authorization: Bearer $IONOS_TOKEN" "https://dns.de-fra.ionos.com/zones/$ZONE_ID"

          
            