/*
IONOS Cloud - DNS API

Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.

API version: 1.17.0
Contact: support@cloud.ionos.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Quota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Quota{}

// Quota struct for Quota
type Quota struct {
	QuotaUsage  QuotaDetail `json:"quotaUsage"`
	QuotaLimits QuotaDetail `json:"quotaLimits"`
}

type _Quota Quota

// NewQuota instantiates a new Quota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuota(quotaUsage QuotaDetail, quotaLimits QuotaDetail) *Quota {
	this := Quota{}
	this.QuotaUsage = quotaUsage
	this.QuotaLimits = quotaLimits
	return &this
}

// NewQuotaWithDefaults instantiates a new Quota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaWithDefaults() *Quota {
	this := Quota{}
	return &this
}

// GetQuotaUsage returns the QuotaUsage field value
func (o *Quota) GetQuotaUsage() QuotaDetail {
	if o == nil {
		var ret QuotaDetail
		return ret
	}

	return o.QuotaUsage
}

// GetQuotaUsageOk returns a tuple with the QuotaUsage field value
// and a boolean to check if the value has been set.
func (o *Quota) GetQuotaUsageOk() (*QuotaDetail, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuotaUsage, true
}

// SetQuotaUsage sets field value
func (o *Quota) SetQuotaUsage(v QuotaDetail) {
	o.QuotaUsage = v
}

// GetQuotaLimits returns the QuotaLimits field value
func (o *Quota) GetQuotaLimits() QuotaDetail {
	if o == nil {
		var ret QuotaDetail
		return ret
	}

	return o.QuotaLimits
}

// GetQuotaLimitsOk returns a tuple with the QuotaLimits field value
// and a boolean to check if the value has been set.
func (o *Quota) GetQuotaLimitsOk() (*QuotaDetail, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuotaLimits, true
}

// SetQuotaLimits sets field value
func (o *Quota) SetQuotaLimits(v QuotaDetail) {
	o.QuotaLimits = v
}

func (o Quota) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Quota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quotaUsage"] = o.QuotaUsage
	toSerialize["quotaLimits"] = o.QuotaLimits
	return toSerialize, nil
}

func (o *Quota) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quotaUsage",
		"quotaLimits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuota := _Quota{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuota)

	if err != nil {
		return err
	}

	*o = Quota(varQuota)

	return err
}

type NullableQuota struct {
	value *Quota
	isSet bool
}

func (v NullableQuota) Get() *Quota {
	return v.value
}

func (v *NullableQuota) Set(val *Quota) {
	v.value = val
	v.isSet = true
}

func (v NullableQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuota(val *Quota) *NullableQuota {
	return &NullableQuota{value: val, isSet: true}
}

func (v NullableQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
