/*
IONOS Cloud - DNS API

Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.

API version: 1.17.0
Contact: support@cloud.ionos.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ZoneEnsure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneEnsure{}

// ZoneEnsure struct for ZoneEnsure
type ZoneEnsure struct {
	Properties Zone `json:"properties"`
}

type _ZoneEnsure ZoneEnsure

// NewZoneEnsure instantiates a new ZoneEnsure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneEnsure(properties Zone) *ZoneEnsure {
	this := ZoneEnsure{}
	this.Properties = properties
	return &this
}

// NewZoneEnsureWithDefaults instantiates a new ZoneEnsure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneEnsureWithDefaults() *ZoneEnsure {
	this := ZoneEnsure{}
	return &this
}

// GetProperties returns the Properties field value
func (o *ZoneEnsure) GetProperties() Zone {
	if o == nil {
		var ret Zone
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *ZoneEnsure) GetPropertiesOk() (*Zone, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Properties, true
}

// SetProperties sets field value
func (o *ZoneEnsure) SetProperties(v Zone) {
	o.Properties = v
}

func (o ZoneEnsure) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneEnsure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

func (o *ZoneEnsure) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"properties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZoneEnsure := _ZoneEnsure{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varZoneEnsure)

	if err != nil {
		return err
	}

	*o = ZoneEnsure(varZoneEnsure)

	return err
}

type NullableZoneEnsure struct {
	value *ZoneEnsure
	isSet bool
}

func (v NullableZoneEnsure) Get() *ZoneEnsure {
	return v.value
}

func (v *NullableZoneEnsure) Set(val *ZoneEnsure) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneEnsure) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneEnsure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneEnsure(val *ZoneEnsure) *NullableZoneEnsure {
	return &NullableZoneEnsure{value: val, isSet: true}
}

func (v NullableZoneEnsure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneEnsure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
