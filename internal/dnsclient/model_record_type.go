/*
IONOS Cloud - DNS API

Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.

API version: 1.17.0
Contact: support@cloud.ionos.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
	"fmt"
)

// RecordType Holds supported DNS resource record types. In the DNS context a record is a DNS resource record.
type RecordType string

// List of RecordType
const (
	A          RecordType = "A"
	AAAA       RecordType = "AAAA"
	CNAME      RecordType = "CNAME"
	ALIAS      RecordType = "ALIAS"
	MX         RecordType = "MX"
	NS         RecordType = "NS"
	SRV        RecordType = "SRV"
	TXT        RecordType = "TXT"
	CAA        RecordType = "CAA"
	SSHFP      RecordType = "SSHFP"
	TLSA       RecordType = "TLSA"
	SMIMEA     RecordType = "SMIMEA"
	DS         RecordType = "DS"
	HTTPS      RecordType = "HTTPS"
	SVCB       RecordType = "SVCB"
	OPENPGPKEY RecordType = "OPENPGPKEY"
	CERT       RecordType = "CERT"
	URI        RecordType = "URI"
	RP         RecordType = "RP"
	LOC        RecordType = "LOC"
)

// All allowed values of RecordType enum
var AllowedRecordTypeEnumValues = []RecordType{
	"A",
	"AAAA",
	"CNAME",
	"ALIAS",
	"MX",
	"NS",
	"SRV",
	"TXT",
	"CAA",
	"SSHFP",
	"TLSA",
	"SMIMEA",
	"DS",
	"HTTPS",
	"SVCB",
	"OPENPGPKEY",
	"CERT",
	"URI",
	"RP",
	"LOC",
}

func (v *RecordType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RecordType(value)
	for _, existing := range AllowedRecordTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RecordType", value)
}

// NewRecordTypeFromValue returns a pointer to a valid RecordType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecordTypeFromValue(v string) (*RecordType, error) {
	ev := RecordType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RecordType: valid values are %v", v, AllowedRecordTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecordType) IsValid() bool {
	for _, existing := range AllowedRecordTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RecordType value
func (v RecordType) Ptr() *RecordType {
	return &v
}

type NullableRecordType struct {
	value *RecordType
	isSet bool
}

func (v NullableRecordType) Get() *RecordType {
	return v.value
}

func (v *NullableRecordType) Set(val *RecordType) {
	v.value = val
	v.isSet = true
}

func (v NullableRecordType) IsSet() bool {
	return v.isSet
}

func (v *NullableRecordType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecordType(val *RecordType) *NullableRecordType {
	return &NullableRecordType{value: val, isSet: true}
}

func (v NullableRecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecordType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
