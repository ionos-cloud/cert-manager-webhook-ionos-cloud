// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	dnsclient "github.com/ionos-cloud/cert-manager-webhook-ionos-cloud/internal/dnsclient"

	mock "github.com/stretchr/testify/mock"
)

// ZonesAPI is an autogenerated mock type for the ZonesAPI type
type ZonesAPI struct {
	mock.Mock
}

type ZonesAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *ZonesAPI) EXPECT() *ZonesAPI_Expecter {
	return &ZonesAPI_Expecter{mock: &_m.Mock}
}

// ZonesDelete provides a mock function with given fields: ctx, zoneId
func (_m *ZonesAPI) ZonesDelete(ctx context.Context, zoneId string) dnsclient.ApiZonesDeleteRequest {
	ret := _m.Called(ctx, zoneId)

	if len(ret) == 0 {
		panic("no return value specified for ZonesDelete")
	}

	var r0 dnsclient.ApiZonesDeleteRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) dnsclient.ApiZonesDeleteRequest); ok {
		r0 = rf(ctx, zoneId)
	} else {
		r0 = ret.Get(0).(dnsclient.ApiZonesDeleteRequest)
	}

	return r0
}

// ZonesAPI_ZonesDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesDelete'
type ZonesAPI_ZonesDelete_Call struct {
	*mock.Call
}

// ZonesDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - zoneId string
func (_e *ZonesAPI_Expecter) ZonesDelete(ctx interface{}, zoneId interface{}) *ZonesAPI_ZonesDelete_Call {
	return &ZonesAPI_ZonesDelete_Call{Call: _e.mock.On("ZonesDelete", ctx, zoneId)}
}

func (_c *ZonesAPI_ZonesDelete_Call) Run(run func(ctx context.Context, zoneId string)) *ZonesAPI_ZonesDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ZonesAPI_ZonesDelete_Call) Return(_a0 dnsclient.ApiZonesDeleteRequest) *ZonesAPI_ZonesDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ZonesAPI_ZonesDelete_Call) RunAndReturn(run func(context.Context, string) dnsclient.ApiZonesDeleteRequest) *ZonesAPI_ZonesDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesDeleteExecute provides a mock function with given fields: r
func (_m *ZonesAPI) ZonesDeleteExecute(r dnsclient.ApiZonesDeleteRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ZonesDeleteExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesDeleteRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesDeleteRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(dnsclient.ApiZonesDeleteRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(dnsclient.ApiZonesDeleteRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ZonesAPI_ZonesDeleteExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesDeleteExecute'
type ZonesAPI_ZonesDeleteExecute_Call struct {
	*mock.Call
}

// ZonesDeleteExecute is a helper method to define mock.On call
//   - r dnsclient.ApiZonesDeleteRequest
func (_e *ZonesAPI_Expecter) ZonesDeleteExecute(r interface{}) *ZonesAPI_ZonesDeleteExecute_Call {
	return &ZonesAPI_ZonesDeleteExecute_Call{Call: _e.mock.On("ZonesDeleteExecute", r)}
}

func (_c *ZonesAPI_ZonesDeleteExecute_Call) Run(run func(r dnsclient.ApiZonesDeleteRequest)) *ZonesAPI_ZonesDeleteExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dnsclient.ApiZonesDeleteRequest))
	})
	return _c
}

func (_c *ZonesAPI_ZonesDeleteExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *ZonesAPI_ZonesDeleteExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ZonesAPI_ZonesDeleteExecute_Call) RunAndReturn(run func(dnsclient.ApiZonesDeleteRequest) (map[string]interface{}, *http.Response, error)) *ZonesAPI_ZonesDeleteExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesFindById provides a mock function with given fields: ctx, zoneId
func (_m *ZonesAPI) ZonesFindById(ctx context.Context, zoneId string) dnsclient.ApiZonesFindByIdRequest {
	ret := _m.Called(ctx, zoneId)

	if len(ret) == 0 {
		panic("no return value specified for ZonesFindById")
	}

	var r0 dnsclient.ApiZonesFindByIdRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) dnsclient.ApiZonesFindByIdRequest); ok {
		r0 = rf(ctx, zoneId)
	} else {
		r0 = ret.Get(0).(dnsclient.ApiZonesFindByIdRequest)
	}

	return r0
}

// ZonesAPI_ZonesFindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesFindById'
type ZonesAPI_ZonesFindById_Call struct {
	*mock.Call
}

// ZonesFindById is a helper method to define mock.On call
//   - ctx context.Context
//   - zoneId string
func (_e *ZonesAPI_Expecter) ZonesFindById(ctx interface{}, zoneId interface{}) *ZonesAPI_ZonesFindById_Call {
	return &ZonesAPI_ZonesFindById_Call{Call: _e.mock.On("ZonesFindById", ctx, zoneId)}
}

func (_c *ZonesAPI_ZonesFindById_Call) Run(run func(ctx context.Context, zoneId string)) *ZonesAPI_ZonesFindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ZonesAPI_ZonesFindById_Call) Return(_a0 dnsclient.ApiZonesFindByIdRequest) *ZonesAPI_ZonesFindById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ZonesAPI_ZonesFindById_Call) RunAndReturn(run func(context.Context, string) dnsclient.ApiZonesFindByIdRequest) *ZonesAPI_ZonesFindById_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesFindByIdExecute provides a mock function with given fields: r
func (_m *ZonesAPI) ZonesFindByIdExecute(r dnsclient.ApiZonesFindByIdRequest) (*dnsclient.ZoneRead, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ZonesFindByIdExecute")
	}

	var r0 *dnsclient.ZoneRead
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesFindByIdRequest) (*dnsclient.ZoneRead, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesFindByIdRequest) *dnsclient.ZoneRead); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsclient.ZoneRead)
		}
	}

	if rf, ok := ret.Get(1).(func(dnsclient.ApiZonesFindByIdRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(dnsclient.ApiZonesFindByIdRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ZonesAPI_ZonesFindByIdExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesFindByIdExecute'
type ZonesAPI_ZonesFindByIdExecute_Call struct {
	*mock.Call
}

// ZonesFindByIdExecute is a helper method to define mock.On call
//   - r dnsclient.ApiZonesFindByIdRequest
func (_e *ZonesAPI_Expecter) ZonesFindByIdExecute(r interface{}) *ZonesAPI_ZonesFindByIdExecute_Call {
	return &ZonesAPI_ZonesFindByIdExecute_Call{Call: _e.mock.On("ZonesFindByIdExecute", r)}
}

func (_c *ZonesAPI_ZonesFindByIdExecute_Call) Run(run func(r dnsclient.ApiZonesFindByIdRequest)) *ZonesAPI_ZonesFindByIdExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dnsclient.ApiZonesFindByIdRequest))
	})
	return _c
}

func (_c *ZonesAPI_ZonesFindByIdExecute_Call) Return(_a0 *dnsclient.ZoneRead, _a1 *http.Response, _a2 error) *ZonesAPI_ZonesFindByIdExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ZonesAPI_ZonesFindByIdExecute_Call) RunAndReturn(run func(dnsclient.ApiZonesFindByIdRequest) (*dnsclient.ZoneRead, *http.Response, error)) *ZonesAPI_ZonesFindByIdExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesGet provides a mock function with given fields: ctx
func (_m *ZonesAPI) ZonesGet(ctx context.Context) dnsclient.ApiZonesGetRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ZonesGet")
	}

	var r0 dnsclient.ApiZonesGetRequest
	if rf, ok := ret.Get(0).(func(context.Context) dnsclient.ApiZonesGetRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(dnsclient.ApiZonesGetRequest)
	}

	return r0
}

// ZonesAPI_ZonesGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesGet'
type ZonesAPI_ZonesGet_Call struct {
	*mock.Call
}

// ZonesGet is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ZonesAPI_Expecter) ZonesGet(ctx interface{}) *ZonesAPI_ZonesGet_Call {
	return &ZonesAPI_ZonesGet_Call{Call: _e.mock.On("ZonesGet", ctx)}
}

func (_c *ZonesAPI_ZonesGet_Call) Run(run func(ctx context.Context)) *ZonesAPI_ZonesGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ZonesAPI_ZonesGet_Call) Return(_a0 dnsclient.ApiZonesGetRequest) *ZonesAPI_ZonesGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ZonesAPI_ZonesGet_Call) RunAndReturn(run func(context.Context) dnsclient.ApiZonesGetRequest) *ZonesAPI_ZonesGet_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesGetExecute provides a mock function with given fields: r
func (_m *ZonesAPI) ZonesGetExecute(r dnsclient.ApiZonesGetRequest) (*dnsclient.ZoneReadList, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ZonesGetExecute")
	}

	var r0 *dnsclient.ZoneReadList
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesGetRequest) (*dnsclient.ZoneReadList, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesGetRequest) *dnsclient.ZoneReadList); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsclient.ZoneReadList)
		}
	}

	if rf, ok := ret.Get(1).(func(dnsclient.ApiZonesGetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(dnsclient.ApiZonesGetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ZonesAPI_ZonesGetExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesGetExecute'
type ZonesAPI_ZonesGetExecute_Call struct {
	*mock.Call
}

// ZonesGetExecute is a helper method to define mock.On call
//   - r dnsclient.ApiZonesGetRequest
func (_e *ZonesAPI_Expecter) ZonesGetExecute(r interface{}) *ZonesAPI_ZonesGetExecute_Call {
	return &ZonesAPI_ZonesGetExecute_Call{Call: _e.mock.On("ZonesGetExecute", r)}
}

func (_c *ZonesAPI_ZonesGetExecute_Call) Run(run func(r dnsclient.ApiZonesGetRequest)) *ZonesAPI_ZonesGetExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dnsclient.ApiZonesGetRequest))
	})
	return _c
}

func (_c *ZonesAPI_ZonesGetExecute_Call) Return(_a0 *dnsclient.ZoneReadList, _a1 *http.Response, _a2 error) *ZonesAPI_ZonesGetExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ZonesAPI_ZonesGetExecute_Call) RunAndReturn(run func(dnsclient.ApiZonesGetRequest) (*dnsclient.ZoneReadList, *http.Response, error)) *ZonesAPI_ZonesGetExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesPost provides a mock function with given fields: ctx
func (_m *ZonesAPI) ZonesPost(ctx context.Context) dnsclient.ApiZonesPostRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ZonesPost")
	}

	var r0 dnsclient.ApiZonesPostRequest
	if rf, ok := ret.Get(0).(func(context.Context) dnsclient.ApiZonesPostRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(dnsclient.ApiZonesPostRequest)
	}

	return r0
}

// ZonesAPI_ZonesPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesPost'
type ZonesAPI_ZonesPost_Call struct {
	*mock.Call
}

// ZonesPost is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ZonesAPI_Expecter) ZonesPost(ctx interface{}) *ZonesAPI_ZonesPost_Call {
	return &ZonesAPI_ZonesPost_Call{Call: _e.mock.On("ZonesPost", ctx)}
}

func (_c *ZonesAPI_ZonesPost_Call) Run(run func(ctx context.Context)) *ZonesAPI_ZonesPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ZonesAPI_ZonesPost_Call) Return(_a0 dnsclient.ApiZonesPostRequest) *ZonesAPI_ZonesPost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ZonesAPI_ZonesPost_Call) RunAndReturn(run func(context.Context) dnsclient.ApiZonesPostRequest) *ZonesAPI_ZonesPost_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesPostExecute provides a mock function with given fields: r
func (_m *ZonesAPI) ZonesPostExecute(r dnsclient.ApiZonesPostRequest) (*dnsclient.ZoneRead, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ZonesPostExecute")
	}

	var r0 *dnsclient.ZoneRead
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesPostRequest) (*dnsclient.ZoneRead, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesPostRequest) *dnsclient.ZoneRead); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsclient.ZoneRead)
		}
	}

	if rf, ok := ret.Get(1).(func(dnsclient.ApiZonesPostRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(dnsclient.ApiZonesPostRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ZonesAPI_ZonesPostExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesPostExecute'
type ZonesAPI_ZonesPostExecute_Call struct {
	*mock.Call
}

// ZonesPostExecute is a helper method to define mock.On call
//   - r dnsclient.ApiZonesPostRequest
func (_e *ZonesAPI_Expecter) ZonesPostExecute(r interface{}) *ZonesAPI_ZonesPostExecute_Call {
	return &ZonesAPI_ZonesPostExecute_Call{Call: _e.mock.On("ZonesPostExecute", r)}
}

func (_c *ZonesAPI_ZonesPostExecute_Call) Run(run func(r dnsclient.ApiZonesPostRequest)) *ZonesAPI_ZonesPostExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dnsclient.ApiZonesPostRequest))
	})
	return _c
}

func (_c *ZonesAPI_ZonesPostExecute_Call) Return(_a0 *dnsclient.ZoneRead, _a1 *http.Response, _a2 error) *ZonesAPI_ZonesPostExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ZonesAPI_ZonesPostExecute_Call) RunAndReturn(run func(dnsclient.ApiZonesPostRequest) (*dnsclient.ZoneRead, *http.Response, error)) *ZonesAPI_ZonesPostExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesPut provides a mock function with given fields: ctx, zoneId
func (_m *ZonesAPI) ZonesPut(ctx context.Context, zoneId string) dnsclient.ApiZonesPutRequest {
	ret := _m.Called(ctx, zoneId)

	if len(ret) == 0 {
		panic("no return value specified for ZonesPut")
	}

	var r0 dnsclient.ApiZonesPutRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) dnsclient.ApiZonesPutRequest); ok {
		r0 = rf(ctx, zoneId)
	} else {
		r0 = ret.Get(0).(dnsclient.ApiZonesPutRequest)
	}

	return r0
}

// ZonesAPI_ZonesPut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesPut'
type ZonesAPI_ZonesPut_Call struct {
	*mock.Call
}

// ZonesPut is a helper method to define mock.On call
//   - ctx context.Context
//   - zoneId string
func (_e *ZonesAPI_Expecter) ZonesPut(ctx interface{}, zoneId interface{}) *ZonesAPI_ZonesPut_Call {
	return &ZonesAPI_ZonesPut_Call{Call: _e.mock.On("ZonesPut", ctx, zoneId)}
}

func (_c *ZonesAPI_ZonesPut_Call) Run(run func(ctx context.Context, zoneId string)) *ZonesAPI_ZonesPut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ZonesAPI_ZonesPut_Call) Return(_a0 dnsclient.ApiZonesPutRequest) *ZonesAPI_ZonesPut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ZonesAPI_ZonesPut_Call) RunAndReturn(run func(context.Context, string) dnsclient.ApiZonesPutRequest) *ZonesAPI_ZonesPut_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesPutExecute provides a mock function with given fields: r
func (_m *ZonesAPI) ZonesPutExecute(r dnsclient.ApiZonesPutRequest) (*dnsclient.ZoneRead, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ZonesPutExecute")
	}

	var r0 *dnsclient.ZoneRead
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesPutRequest) (*dnsclient.ZoneRead, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesPutRequest) *dnsclient.ZoneRead); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsclient.ZoneRead)
		}
	}

	if rf, ok := ret.Get(1).(func(dnsclient.ApiZonesPutRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(dnsclient.ApiZonesPutRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ZonesAPI_ZonesPutExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesPutExecute'
type ZonesAPI_ZonesPutExecute_Call struct {
	*mock.Call
}

// ZonesPutExecute is a helper method to define mock.On call
//   - r dnsclient.ApiZonesPutRequest
func (_e *ZonesAPI_Expecter) ZonesPutExecute(r interface{}) *ZonesAPI_ZonesPutExecute_Call {
	return &ZonesAPI_ZonesPutExecute_Call{Call: _e.mock.On("ZonesPutExecute", r)}
}

func (_c *ZonesAPI_ZonesPutExecute_Call) Run(run func(r dnsclient.ApiZonesPutRequest)) *ZonesAPI_ZonesPutExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dnsclient.ApiZonesPutRequest))
	})
	return _c
}

func (_c *ZonesAPI_ZonesPutExecute_Call) Return(_a0 *dnsclient.ZoneRead, _a1 *http.Response, _a2 error) *ZonesAPI_ZonesPutExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ZonesAPI_ZonesPutExecute_Call) RunAndReturn(run func(dnsclient.ApiZonesPutRequest) (*dnsclient.ZoneRead, *http.Response, error)) *ZonesAPI_ZonesPutExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewZonesAPI creates a new instance of ZonesAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewZonesAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *ZonesAPI {
	mock := &ZonesAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
