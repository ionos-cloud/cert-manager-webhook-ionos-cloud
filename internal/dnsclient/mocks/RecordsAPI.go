// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	dnsclient "github.com/ionos-cloud/cert-manager-webhook-ionos-cloud/internal/dnsclient"

	mock "github.com/stretchr/testify/mock"
)

// RecordsAPI is an autogenerated mock type for the RecordsAPI type
type RecordsAPI struct {
	mock.Mock
}

type RecordsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *RecordsAPI) EXPECT() *RecordsAPI_Expecter {
	return &RecordsAPI_Expecter{mock: &_m.Mock}
}

// RecordsGet provides a mock function with given fields: ctx
func (_m *RecordsAPI) RecordsGet(ctx context.Context) dnsclient.ApiRecordsGetRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RecordsGet")
	}

	var r0 dnsclient.ApiRecordsGetRequest
	if rf, ok := ret.Get(0).(func(context.Context) dnsclient.ApiRecordsGetRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(dnsclient.ApiRecordsGetRequest)
	}

	return r0
}

// RecordsAPI_RecordsGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordsGet'
type RecordsAPI_RecordsGet_Call struct {
	*mock.Call
}

// RecordsGet is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RecordsAPI_Expecter) RecordsGet(ctx interface{}) *RecordsAPI_RecordsGet_Call {
	return &RecordsAPI_RecordsGet_Call{Call: _e.mock.On("RecordsGet", ctx)}
}

func (_c *RecordsAPI_RecordsGet_Call) Run(run func(ctx context.Context)) *RecordsAPI_RecordsGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RecordsAPI_RecordsGet_Call) Return(_a0 dnsclient.ApiRecordsGetRequest) *RecordsAPI_RecordsGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecordsAPI_RecordsGet_Call) RunAndReturn(run func(context.Context) dnsclient.ApiRecordsGetRequest) *RecordsAPI_RecordsGet_Call {
	_c.Call.Return(run)
	return _c
}

// RecordsGetExecute provides a mock function with given fields: r
func (_m *RecordsAPI) RecordsGetExecute(r dnsclient.ApiRecordsGetRequest) (*dnsclient.RecordReadList, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RecordsGetExecute")
	}

	var r0 *dnsclient.RecordReadList
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(dnsclient.ApiRecordsGetRequest) (*dnsclient.RecordReadList, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(dnsclient.ApiRecordsGetRequest) *dnsclient.RecordReadList); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsclient.RecordReadList)
		}
	}

	if rf, ok := ret.Get(1).(func(dnsclient.ApiRecordsGetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(dnsclient.ApiRecordsGetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RecordsAPI_RecordsGetExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RecordsGetExecute'
type RecordsAPI_RecordsGetExecute_Call struct {
	*mock.Call
}

// RecordsGetExecute is a helper method to define mock.On call
//   - r dnsclient.ApiRecordsGetRequest
func (_e *RecordsAPI_Expecter) RecordsGetExecute(r interface{}) *RecordsAPI_RecordsGetExecute_Call {
	return &RecordsAPI_RecordsGetExecute_Call{Call: _e.mock.On("RecordsGetExecute", r)}
}

func (_c *RecordsAPI_RecordsGetExecute_Call) Run(run func(r dnsclient.ApiRecordsGetRequest)) *RecordsAPI_RecordsGetExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dnsclient.ApiRecordsGetRequest))
	})
	return _c
}

func (_c *RecordsAPI_RecordsGetExecute_Call) Return(_a0 *dnsclient.RecordReadList, _a1 *http.Response, _a2 error) *RecordsAPI_RecordsGetExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RecordsAPI_RecordsGetExecute_Call) RunAndReturn(run func(dnsclient.ApiRecordsGetRequest) (*dnsclient.RecordReadList, *http.Response, error)) *RecordsAPI_RecordsGetExecute_Call {
	_c.Call.Return(run)
	return _c
}

// SecondaryzonesRecordsGet provides a mock function with given fields: ctx, secondaryZoneId
func (_m *RecordsAPI) SecondaryzonesRecordsGet(ctx context.Context, secondaryZoneId string) dnsclient.ApiSecondaryzonesRecordsGetRequest {
	ret := _m.Called(ctx, secondaryZoneId)

	if len(ret) == 0 {
		panic("no return value specified for SecondaryzonesRecordsGet")
	}

	var r0 dnsclient.ApiSecondaryzonesRecordsGetRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) dnsclient.ApiSecondaryzonesRecordsGetRequest); ok {
		r0 = rf(ctx, secondaryZoneId)
	} else {
		r0 = ret.Get(0).(dnsclient.ApiSecondaryzonesRecordsGetRequest)
	}

	return r0
}

// RecordsAPI_SecondaryzonesRecordsGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecondaryzonesRecordsGet'
type RecordsAPI_SecondaryzonesRecordsGet_Call struct {
	*mock.Call
}

// SecondaryzonesRecordsGet is a helper method to define mock.On call
//   - ctx context.Context
//   - secondaryZoneId string
func (_e *RecordsAPI_Expecter) SecondaryzonesRecordsGet(ctx interface{}, secondaryZoneId interface{}) *RecordsAPI_SecondaryzonesRecordsGet_Call {
	return &RecordsAPI_SecondaryzonesRecordsGet_Call{Call: _e.mock.On("SecondaryzonesRecordsGet", ctx, secondaryZoneId)}
}

func (_c *RecordsAPI_SecondaryzonesRecordsGet_Call) Run(run func(ctx context.Context, secondaryZoneId string)) *RecordsAPI_SecondaryzonesRecordsGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RecordsAPI_SecondaryzonesRecordsGet_Call) Return(_a0 dnsclient.ApiSecondaryzonesRecordsGetRequest) *RecordsAPI_SecondaryzonesRecordsGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecordsAPI_SecondaryzonesRecordsGet_Call) RunAndReturn(run func(context.Context, string) dnsclient.ApiSecondaryzonesRecordsGetRequest) *RecordsAPI_SecondaryzonesRecordsGet_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesRecordsDelete provides a mock function with given fields: ctx, zoneId, recordId
func (_m *RecordsAPI) ZonesRecordsDelete(ctx context.Context, zoneId string, recordId string) dnsclient.ApiZonesRecordsDeleteRequest {
	ret := _m.Called(ctx, zoneId, recordId)

	if len(ret) == 0 {
		panic("no return value specified for ZonesRecordsDelete")
	}

	var r0 dnsclient.ApiZonesRecordsDeleteRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) dnsclient.ApiZonesRecordsDeleteRequest); ok {
		r0 = rf(ctx, zoneId, recordId)
	} else {
		r0 = ret.Get(0).(dnsclient.ApiZonesRecordsDeleteRequest)
	}

	return r0
}

// RecordsAPI_ZonesRecordsDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesRecordsDelete'
type RecordsAPI_ZonesRecordsDelete_Call struct {
	*mock.Call
}

// ZonesRecordsDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - zoneId string
//   - recordId string
func (_e *RecordsAPI_Expecter) ZonesRecordsDelete(ctx interface{}, zoneId interface{}, recordId interface{}) *RecordsAPI_ZonesRecordsDelete_Call {
	return &RecordsAPI_ZonesRecordsDelete_Call{Call: _e.mock.On("ZonesRecordsDelete", ctx, zoneId, recordId)}
}

func (_c *RecordsAPI_ZonesRecordsDelete_Call) Run(run func(ctx context.Context, zoneId string, recordId string)) *RecordsAPI_ZonesRecordsDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RecordsAPI_ZonesRecordsDelete_Call) Return(_a0 dnsclient.ApiZonesRecordsDeleteRequest) *RecordsAPI_ZonesRecordsDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecordsAPI_ZonesRecordsDelete_Call) RunAndReturn(run func(context.Context, string, string) dnsclient.ApiZonesRecordsDeleteRequest) *RecordsAPI_ZonesRecordsDelete_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesRecordsDeleteExecute provides a mock function with given fields: r
func (_m *RecordsAPI) ZonesRecordsDeleteExecute(r dnsclient.ApiZonesRecordsDeleteRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ZonesRecordsDeleteExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesRecordsDeleteRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesRecordsDeleteRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(dnsclient.ApiZonesRecordsDeleteRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(dnsclient.ApiZonesRecordsDeleteRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RecordsAPI_ZonesRecordsDeleteExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesRecordsDeleteExecute'
type RecordsAPI_ZonesRecordsDeleteExecute_Call struct {
	*mock.Call
}

// ZonesRecordsDeleteExecute is a helper method to define mock.On call
//   - r dnsclient.ApiZonesRecordsDeleteRequest
func (_e *RecordsAPI_Expecter) ZonesRecordsDeleteExecute(r interface{}) *RecordsAPI_ZonesRecordsDeleteExecute_Call {
	return &RecordsAPI_ZonesRecordsDeleteExecute_Call{Call: _e.mock.On("ZonesRecordsDeleteExecute", r)}
}

func (_c *RecordsAPI_ZonesRecordsDeleteExecute_Call) Run(run func(r dnsclient.ApiZonesRecordsDeleteRequest)) *RecordsAPI_ZonesRecordsDeleteExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dnsclient.ApiZonesRecordsDeleteRequest))
	})
	return _c
}

func (_c *RecordsAPI_ZonesRecordsDeleteExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *RecordsAPI_ZonesRecordsDeleteExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RecordsAPI_ZonesRecordsDeleteExecute_Call) RunAndReturn(run func(dnsclient.ApiZonesRecordsDeleteRequest) (map[string]interface{}, *http.Response, error)) *RecordsAPI_ZonesRecordsDeleteExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesRecordsFindById provides a mock function with given fields: ctx, zoneId, recordId
func (_m *RecordsAPI) ZonesRecordsFindById(ctx context.Context, zoneId string, recordId string) dnsclient.ApiZonesRecordsFindByIdRequest {
	ret := _m.Called(ctx, zoneId, recordId)

	if len(ret) == 0 {
		panic("no return value specified for ZonesRecordsFindById")
	}

	var r0 dnsclient.ApiZonesRecordsFindByIdRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) dnsclient.ApiZonesRecordsFindByIdRequest); ok {
		r0 = rf(ctx, zoneId, recordId)
	} else {
		r0 = ret.Get(0).(dnsclient.ApiZonesRecordsFindByIdRequest)
	}

	return r0
}

// RecordsAPI_ZonesRecordsFindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesRecordsFindById'
type RecordsAPI_ZonesRecordsFindById_Call struct {
	*mock.Call
}

// ZonesRecordsFindById is a helper method to define mock.On call
//   - ctx context.Context
//   - zoneId string
//   - recordId string
func (_e *RecordsAPI_Expecter) ZonesRecordsFindById(ctx interface{}, zoneId interface{}, recordId interface{}) *RecordsAPI_ZonesRecordsFindById_Call {
	return &RecordsAPI_ZonesRecordsFindById_Call{Call: _e.mock.On("ZonesRecordsFindById", ctx, zoneId, recordId)}
}

func (_c *RecordsAPI_ZonesRecordsFindById_Call) Run(run func(ctx context.Context, zoneId string, recordId string)) *RecordsAPI_ZonesRecordsFindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RecordsAPI_ZonesRecordsFindById_Call) Return(_a0 dnsclient.ApiZonesRecordsFindByIdRequest) *RecordsAPI_ZonesRecordsFindById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecordsAPI_ZonesRecordsFindById_Call) RunAndReturn(run func(context.Context, string, string) dnsclient.ApiZonesRecordsFindByIdRequest) *RecordsAPI_ZonesRecordsFindById_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesRecordsFindByIdExecute provides a mock function with given fields: r
func (_m *RecordsAPI) ZonesRecordsFindByIdExecute(r dnsclient.ApiZonesRecordsFindByIdRequest) (*dnsclient.RecordRead, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ZonesRecordsFindByIdExecute")
	}

	var r0 *dnsclient.RecordRead
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesRecordsFindByIdRequest) (*dnsclient.RecordRead, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesRecordsFindByIdRequest) *dnsclient.RecordRead); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsclient.RecordRead)
		}
	}

	if rf, ok := ret.Get(1).(func(dnsclient.ApiZonesRecordsFindByIdRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(dnsclient.ApiZonesRecordsFindByIdRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RecordsAPI_ZonesRecordsFindByIdExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesRecordsFindByIdExecute'
type RecordsAPI_ZonesRecordsFindByIdExecute_Call struct {
	*mock.Call
}

// ZonesRecordsFindByIdExecute is a helper method to define mock.On call
//   - r dnsclient.ApiZonesRecordsFindByIdRequest
func (_e *RecordsAPI_Expecter) ZonesRecordsFindByIdExecute(r interface{}) *RecordsAPI_ZonesRecordsFindByIdExecute_Call {
	return &RecordsAPI_ZonesRecordsFindByIdExecute_Call{Call: _e.mock.On("ZonesRecordsFindByIdExecute", r)}
}

func (_c *RecordsAPI_ZonesRecordsFindByIdExecute_Call) Run(run func(r dnsclient.ApiZonesRecordsFindByIdRequest)) *RecordsAPI_ZonesRecordsFindByIdExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dnsclient.ApiZonesRecordsFindByIdRequest))
	})
	return _c
}

func (_c *RecordsAPI_ZonesRecordsFindByIdExecute_Call) Return(_a0 *dnsclient.RecordRead, _a1 *http.Response, _a2 error) *RecordsAPI_ZonesRecordsFindByIdExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RecordsAPI_ZonesRecordsFindByIdExecute_Call) RunAndReturn(run func(dnsclient.ApiZonesRecordsFindByIdRequest) (*dnsclient.RecordRead, *http.Response, error)) *RecordsAPI_ZonesRecordsFindByIdExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesRecordsGet provides a mock function with given fields: ctx, zoneId
func (_m *RecordsAPI) ZonesRecordsGet(ctx context.Context, zoneId string) dnsclient.ApiZonesRecordsGetRequest {
	ret := _m.Called(ctx, zoneId)

	if len(ret) == 0 {
		panic("no return value specified for ZonesRecordsGet")
	}

	var r0 dnsclient.ApiZonesRecordsGetRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) dnsclient.ApiZonesRecordsGetRequest); ok {
		r0 = rf(ctx, zoneId)
	} else {
		r0 = ret.Get(0).(dnsclient.ApiZonesRecordsGetRequest)
	}

	return r0
}

// RecordsAPI_ZonesRecordsGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesRecordsGet'
type RecordsAPI_ZonesRecordsGet_Call struct {
	*mock.Call
}

// ZonesRecordsGet is a helper method to define mock.On call
//   - ctx context.Context
//   - zoneId string
func (_e *RecordsAPI_Expecter) ZonesRecordsGet(ctx interface{}, zoneId interface{}) *RecordsAPI_ZonesRecordsGet_Call {
	return &RecordsAPI_ZonesRecordsGet_Call{Call: _e.mock.On("ZonesRecordsGet", ctx, zoneId)}
}

func (_c *RecordsAPI_ZonesRecordsGet_Call) Run(run func(ctx context.Context, zoneId string)) *RecordsAPI_ZonesRecordsGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RecordsAPI_ZonesRecordsGet_Call) Return(_a0 dnsclient.ApiZonesRecordsGetRequest) *RecordsAPI_ZonesRecordsGet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecordsAPI_ZonesRecordsGet_Call) RunAndReturn(run func(context.Context, string) dnsclient.ApiZonesRecordsGetRequest) *RecordsAPI_ZonesRecordsGet_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesRecordsGetExecute provides a mock function with given fields: r
func (_m *RecordsAPI) ZonesRecordsGetExecute(r dnsclient.ApiZonesRecordsGetRequest) (*dnsclient.RecordReadList, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ZonesRecordsGetExecute")
	}

	var r0 *dnsclient.RecordReadList
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesRecordsGetRequest) (*dnsclient.RecordReadList, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesRecordsGetRequest) *dnsclient.RecordReadList); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsclient.RecordReadList)
		}
	}

	if rf, ok := ret.Get(1).(func(dnsclient.ApiZonesRecordsGetRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(dnsclient.ApiZonesRecordsGetRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RecordsAPI_ZonesRecordsGetExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesRecordsGetExecute'
type RecordsAPI_ZonesRecordsGetExecute_Call struct {
	*mock.Call
}

// ZonesRecordsGetExecute is a helper method to define mock.On call
//   - r dnsclient.ApiZonesRecordsGetRequest
func (_e *RecordsAPI_Expecter) ZonesRecordsGetExecute(r interface{}) *RecordsAPI_ZonesRecordsGetExecute_Call {
	return &RecordsAPI_ZonesRecordsGetExecute_Call{Call: _e.mock.On("ZonesRecordsGetExecute", r)}
}

func (_c *RecordsAPI_ZonesRecordsGetExecute_Call) Run(run func(r dnsclient.ApiZonesRecordsGetRequest)) *RecordsAPI_ZonesRecordsGetExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dnsclient.ApiZonesRecordsGetRequest))
	})
	return _c
}

func (_c *RecordsAPI_ZonesRecordsGetExecute_Call) Return(_a0 *dnsclient.RecordReadList, _a1 *http.Response, _a2 error) *RecordsAPI_ZonesRecordsGetExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RecordsAPI_ZonesRecordsGetExecute_Call) RunAndReturn(run func(dnsclient.ApiZonesRecordsGetRequest) (*dnsclient.RecordReadList, *http.Response, error)) *RecordsAPI_ZonesRecordsGetExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesRecordsPost provides a mock function with given fields: ctx, zoneId
func (_m *RecordsAPI) ZonesRecordsPost(ctx context.Context, zoneId string) dnsclient.ApiZonesRecordsPostRequest {
	ret := _m.Called(ctx, zoneId)

	if len(ret) == 0 {
		panic("no return value specified for ZonesRecordsPost")
	}

	var r0 dnsclient.ApiZonesRecordsPostRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) dnsclient.ApiZonesRecordsPostRequest); ok {
		r0 = rf(ctx, zoneId)
	} else {
		r0 = ret.Get(0).(dnsclient.ApiZonesRecordsPostRequest)
	}

	return r0
}

// RecordsAPI_ZonesRecordsPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesRecordsPost'
type RecordsAPI_ZonesRecordsPost_Call struct {
	*mock.Call
}

// ZonesRecordsPost is a helper method to define mock.On call
//   - ctx context.Context
//   - zoneId string
func (_e *RecordsAPI_Expecter) ZonesRecordsPost(ctx interface{}, zoneId interface{}) *RecordsAPI_ZonesRecordsPost_Call {
	return &RecordsAPI_ZonesRecordsPost_Call{Call: _e.mock.On("ZonesRecordsPost", ctx, zoneId)}
}

func (_c *RecordsAPI_ZonesRecordsPost_Call) Run(run func(ctx context.Context, zoneId string)) *RecordsAPI_ZonesRecordsPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RecordsAPI_ZonesRecordsPost_Call) Return(_a0 dnsclient.ApiZonesRecordsPostRequest) *RecordsAPI_ZonesRecordsPost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecordsAPI_ZonesRecordsPost_Call) RunAndReturn(run func(context.Context, string) dnsclient.ApiZonesRecordsPostRequest) *RecordsAPI_ZonesRecordsPost_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesRecordsPostExecute provides a mock function with given fields: r
func (_m *RecordsAPI) ZonesRecordsPostExecute(r dnsclient.ApiZonesRecordsPostRequest) (*dnsclient.RecordRead, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ZonesRecordsPostExecute")
	}

	var r0 *dnsclient.RecordRead
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesRecordsPostRequest) (*dnsclient.RecordRead, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesRecordsPostRequest) *dnsclient.RecordRead); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsclient.RecordRead)
		}
	}

	if rf, ok := ret.Get(1).(func(dnsclient.ApiZonesRecordsPostRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(dnsclient.ApiZonesRecordsPostRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RecordsAPI_ZonesRecordsPostExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesRecordsPostExecute'
type RecordsAPI_ZonesRecordsPostExecute_Call struct {
	*mock.Call
}

// ZonesRecordsPostExecute is a helper method to define mock.On call
//   - r dnsclient.ApiZonesRecordsPostRequest
func (_e *RecordsAPI_Expecter) ZonesRecordsPostExecute(r interface{}) *RecordsAPI_ZonesRecordsPostExecute_Call {
	return &RecordsAPI_ZonesRecordsPostExecute_Call{Call: _e.mock.On("ZonesRecordsPostExecute", r)}
}

func (_c *RecordsAPI_ZonesRecordsPostExecute_Call) Run(run func(r dnsclient.ApiZonesRecordsPostRequest)) *RecordsAPI_ZonesRecordsPostExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dnsclient.ApiZonesRecordsPostRequest))
	})
	return _c
}

func (_c *RecordsAPI_ZonesRecordsPostExecute_Call) Return(_a0 *dnsclient.RecordRead, _a1 *http.Response, _a2 error) *RecordsAPI_ZonesRecordsPostExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RecordsAPI_ZonesRecordsPostExecute_Call) RunAndReturn(run func(dnsclient.ApiZonesRecordsPostRequest) (*dnsclient.RecordRead, *http.Response, error)) *RecordsAPI_ZonesRecordsPostExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesRecordsPut provides a mock function with given fields: ctx, zoneId, recordId
func (_m *RecordsAPI) ZonesRecordsPut(ctx context.Context, zoneId string, recordId string) dnsclient.ApiZonesRecordsPutRequest {
	ret := _m.Called(ctx, zoneId, recordId)

	if len(ret) == 0 {
		panic("no return value specified for ZonesRecordsPut")
	}

	var r0 dnsclient.ApiZonesRecordsPutRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) dnsclient.ApiZonesRecordsPutRequest); ok {
		r0 = rf(ctx, zoneId, recordId)
	} else {
		r0 = ret.Get(0).(dnsclient.ApiZonesRecordsPutRequest)
	}

	return r0
}

// RecordsAPI_ZonesRecordsPut_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesRecordsPut'
type RecordsAPI_ZonesRecordsPut_Call struct {
	*mock.Call
}

// ZonesRecordsPut is a helper method to define mock.On call
//   - ctx context.Context
//   - zoneId string
//   - recordId string
func (_e *RecordsAPI_Expecter) ZonesRecordsPut(ctx interface{}, zoneId interface{}, recordId interface{}) *RecordsAPI_ZonesRecordsPut_Call {
	return &RecordsAPI_ZonesRecordsPut_Call{Call: _e.mock.On("ZonesRecordsPut", ctx, zoneId, recordId)}
}

func (_c *RecordsAPI_ZonesRecordsPut_Call) Run(run func(ctx context.Context, zoneId string, recordId string)) *RecordsAPI_ZonesRecordsPut_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RecordsAPI_ZonesRecordsPut_Call) Return(_a0 dnsclient.ApiZonesRecordsPutRequest) *RecordsAPI_ZonesRecordsPut_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecordsAPI_ZonesRecordsPut_Call) RunAndReturn(run func(context.Context, string, string) dnsclient.ApiZonesRecordsPutRequest) *RecordsAPI_ZonesRecordsPut_Call {
	_c.Call.Return(run)
	return _c
}

// ZonesRecordsPutExecute provides a mock function with given fields: r
func (_m *RecordsAPI) ZonesRecordsPutExecute(r dnsclient.ApiZonesRecordsPutRequest) (*dnsclient.RecordRead, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ZonesRecordsPutExecute")
	}

	var r0 *dnsclient.RecordRead
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesRecordsPutRequest) (*dnsclient.RecordRead, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(dnsclient.ApiZonesRecordsPutRequest) *dnsclient.RecordRead); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dnsclient.RecordRead)
		}
	}

	if rf, ok := ret.Get(1).(func(dnsclient.ApiZonesRecordsPutRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(dnsclient.ApiZonesRecordsPutRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RecordsAPI_ZonesRecordsPutExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ZonesRecordsPutExecute'
type RecordsAPI_ZonesRecordsPutExecute_Call struct {
	*mock.Call
}

// ZonesRecordsPutExecute is a helper method to define mock.On call
//   - r dnsclient.ApiZonesRecordsPutRequest
func (_e *RecordsAPI_Expecter) ZonesRecordsPutExecute(r interface{}) *RecordsAPI_ZonesRecordsPutExecute_Call {
	return &RecordsAPI_ZonesRecordsPutExecute_Call{Call: _e.mock.On("ZonesRecordsPutExecute", r)}
}

func (_c *RecordsAPI_ZonesRecordsPutExecute_Call) Run(run func(r dnsclient.ApiZonesRecordsPutRequest)) *RecordsAPI_ZonesRecordsPutExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(dnsclient.ApiZonesRecordsPutRequest))
	})
	return _c
}

func (_c *RecordsAPI_ZonesRecordsPutExecute_Call) Return(_a0 *dnsclient.RecordRead, _a1 *http.Response, _a2 error) *RecordsAPI_ZonesRecordsPutExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RecordsAPI_ZonesRecordsPutExecute_Call) RunAndReturn(run func(dnsclient.ApiZonesRecordsPutRequest) (*dnsclient.RecordRead, *http.Response, error)) *RecordsAPI_ZonesRecordsPutExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewRecordsAPI creates a new instance of RecordsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecordsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecordsAPI {
	mock := &RecordsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
