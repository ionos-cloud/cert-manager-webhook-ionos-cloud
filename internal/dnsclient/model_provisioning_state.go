/*
IONOS Cloud - DNS API

Cloud DNS service helps IONOS Cloud customers to automate DNS Zone and Record management.

API version: 1.17.0
Contact: support@cloud.ionos.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dnsclient

import (
	"encoding/json"
	"fmt"
)

// ProvisioningState The list of possible provisioning states in which DNS resource could be at the specific time. * AVAILABLE - resource exists and is healthy. * PROVISIONING - resource is being created or updated. * DESTROYING - delete command was issued, the resource is being deleted. * FAILED - creation of the resource failed.
type ProvisioningState string

// List of ProvisioningState
const (
	PROVISIONING ProvisioningState = "PROVISIONING"
	DESTROYING   ProvisioningState = "DESTROYING"
	AVAILABLE    ProvisioningState = "AVAILABLE"
	FAILED       ProvisioningState = "FAILED"
)

// All allowed values of ProvisioningState enum
var AllowedProvisioningStateEnumValues = []ProvisioningState{
	"PROVISIONING",
	"DESTROYING",
	"AVAILABLE",
	"FAILED",
}

func (v *ProvisioningState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProvisioningState(value)
	for _, existing := range AllowedProvisioningStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProvisioningState", value)
}

// NewProvisioningStateFromValue returns a pointer to a valid ProvisioningState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProvisioningStateFromValue(v string) (*ProvisioningState, error) {
	ev := ProvisioningState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProvisioningState: valid values are %v", v, AllowedProvisioningStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProvisioningState) IsValid() bool {
	for _, existing := range AllowedProvisioningStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProvisioningState value
func (v ProvisioningState) Ptr() *ProvisioningState {
	return &v
}

type NullableProvisioningState struct {
	value *ProvisioningState
	isSet bool
}

func (v NullableProvisioningState) Get() *ProvisioningState {
	return v.value
}

func (v *NullableProvisioningState) Set(val *ProvisioningState) {
	v.value = val
	v.isSet = true
}

func (v NullableProvisioningState) IsSet() bool {
	return v.isSet
}

func (v *NullableProvisioningState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvisioningState(val *ProvisioningState) *NullableProvisioningState {
	return &NullableProvisioningState{value: val, isSet: true}
}

func (v NullableProvisioningState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvisioningState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
