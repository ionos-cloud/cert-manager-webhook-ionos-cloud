// Code generated by mockery v2.53.2. DO NOT EDIT.

package mocks

import (
	ionoscloud "github.com/ionos-cloud/sdk-go-dns"
	mock "github.com/stretchr/testify/mock"
)

// DNSAPI is an autogenerated mock type for the DNSAPI type
type DNSAPI struct {
	mock.Mock
}

type DNSAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *DNSAPI) EXPECT() *DNSAPI_Expecter {
	return &DNSAPI_Expecter{mock: &_m.Mock}
}

// CreateTXTRecord provides a mock function with given fields: zoneId, recordName, content
func (_m *DNSAPI) CreateTXTRecord(zoneId string, recordName string, content string) (ionoscloud.RecordRead, error) {
	ret := _m.Called(zoneId, recordName, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateTXTRecord")
	}

	var r0 ionoscloud.RecordRead
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (ionoscloud.RecordRead, error)); ok {
		return rf(zoneId, recordName, content)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) ionoscloud.RecordRead); ok {
		r0 = rf(zoneId, recordName, content)
	} else {
		r0 = ret.Get(0).(ionoscloud.RecordRead)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(zoneId, recordName, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DNSAPI_CreateTXTRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTXTRecord'
type DNSAPI_CreateTXTRecord_Call struct {
	*mock.Call
}

// CreateTXTRecord is a helper method to define mock.On call
//   - zoneId string
//   - recordName string
//   - content string
func (_e *DNSAPI_Expecter) CreateTXTRecord(zoneId interface{}, recordName interface{}, content interface{}) *DNSAPI_CreateTXTRecord_Call {
	return &DNSAPI_CreateTXTRecord_Call{Call: _e.mock.On("CreateTXTRecord", zoneId, recordName, content)}
}

func (_c *DNSAPI_CreateTXTRecord_Call) Run(run func(zoneId string, recordName string, content string)) *DNSAPI_CreateTXTRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *DNSAPI_CreateTXTRecord_Call) Return(_a0 ionoscloud.RecordRead, _a1 error) *DNSAPI_CreateTXTRecord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DNSAPI_CreateTXTRecord_Call) RunAndReturn(run func(string, string, string) (ionoscloud.RecordRead, error)) *DNSAPI_CreateTXTRecord_Call {
	_c.Call.Return(run)
	return _c
}

// CreateZone provides a mock function with given fields: name
func (_m *DNSAPI) CreateZone(name string) (ionoscloud.ZoneRead, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for CreateZone")
	}

	var r0 ionoscloud.ZoneRead
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (ionoscloud.ZoneRead, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) ionoscloud.ZoneRead); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(ionoscloud.ZoneRead)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DNSAPI_CreateZone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateZone'
type DNSAPI_CreateZone_Call struct {
	*mock.Call
}

// CreateZone is a helper method to define mock.On call
//   - name string
func (_e *DNSAPI_Expecter) CreateZone(name interface{}) *DNSAPI_CreateZone_Call {
	return &DNSAPI_CreateZone_Call{Call: _e.mock.On("CreateZone", name)}
}

func (_c *DNSAPI_CreateZone_Call) Run(run func(name string)) *DNSAPI_CreateZone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DNSAPI_CreateZone_Call) Return(_a0 ionoscloud.ZoneRead, _a1 error) *DNSAPI_CreateZone_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DNSAPI_CreateZone_Call) RunAndReturn(run func(string) (ionoscloud.ZoneRead, error)) *DNSAPI_CreateZone_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRecord provides a mock function with given fields: zoneId, recordId
func (_m *DNSAPI) DeleteRecord(zoneId string, recordId string) error {
	ret := _m.Called(zoneId, recordId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(zoneId, recordId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DNSAPI_DeleteRecord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRecord'
type DNSAPI_DeleteRecord_Call struct {
	*mock.Call
}

// DeleteRecord is a helper method to define mock.On call
//   - zoneId string
//   - recordId string
func (_e *DNSAPI_Expecter) DeleteRecord(zoneId interface{}, recordId interface{}) *DNSAPI_DeleteRecord_Call {
	return &DNSAPI_DeleteRecord_Call{Call: _e.mock.On("DeleteRecord", zoneId, recordId)}
}

func (_c *DNSAPI_DeleteRecord_Call) Run(run func(zoneId string, recordId string)) *DNSAPI_DeleteRecord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *DNSAPI_DeleteRecord_Call) Return(_a0 error) *DNSAPI_DeleteRecord_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DNSAPI_DeleteRecord_Call) RunAndReturn(run func(string, string) error) *DNSAPI_DeleteRecord_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecords provides a mock function with given fields: zoneId, name
func (_m *DNSAPI) GetRecords(zoneId string, name string) (ionoscloud.RecordReadList, error) {
	ret := _m.Called(zoneId, name)

	if len(ret) == 0 {
		panic("no return value specified for GetRecords")
	}

	var r0 ionoscloud.RecordReadList
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (ionoscloud.RecordReadList, error)); ok {
		return rf(zoneId, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) ionoscloud.RecordReadList); ok {
		r0 = rf(zoneId, name)
	} else {
		r0 = ret.Get(0).(ionoscloud.RecordReadList)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(zoneId, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DNSAPI_GetRecords_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecords'
type DNSAPI_GetRecords_Call struct {
	*mock.Call
}

// GetRecords is a helper method to define mock.On call
//   - zoneId string
//   - name string
func (_e *DNSAPI_Expecter) GetRecords(zoneId interface{}, name interface{}) *DNSAPI_GetRecords_Call {
	return &DNSAPI_GetRecords_Call{Call: _e.mock.On("GetRecords", zoneId, name)}
}

func (_c *DNSAPI_GetRecords_Call) Run(run func(zoneId string, name string)) *DNSAPI_GetRecords_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *DNSAPI_GetRecords_Call) Return(_a0 ionoscloud.RecordReadList, _a1 error) *DNSAPI_GetRecords_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DNSAPI_GetRecords_Call) RunAndReturn(run func(string, string) (ionoscloud.RecordReadList, error)) *DNSAPI_GetRecords_Call {
	_c.Call.Return(run)
	return _c
}

// GetZones provides a mock function with given fields: name
func (_m *DNSAPI) GetZones(name string) (ionoscloud.ZoneReadList, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetZones")
	}

	var r0 ionoscloud.ZoneReadList
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (ionoscloud.ZoneReadList, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) ionoscloud.ZoneReadList); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(ionoscloud.ZoneReadList)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DNSAPI_GetZones_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetZones'
type DNSAPI_GetZones_Call struct {
	*mock.Call
}

// GetZones is a helper method to define mock.On call
//   - name string
func (_e *DNSAPI_Expecter) GetZones(name interface{}) *DNSAPI_GetZones_Call {
	return &DNSAPI_GetZones_Call{Call: _e.mock.On("GetZones", name)}
}

func (_c *DNSAPI_GetZones_Call) Run(run func(name string)) *DNSAPI_GetZones_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *DNSAPI_GetZones_Call) Return(_a0 ionoscloud.ZoneReadList, _a1 error) *DNSAPI_GetZones_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DNSAPI_GetZones_Call) RunAndReturn(run func(string) (ionoscloud.ZoneReadList, error)) *DNSAPI_GetZones_Call {
	_c.Call.Return(run)
	return _c
}

// NewDNSAPI creates a new instance of DNSAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDNSAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *DNSAPI {
	mock := &DNSAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
